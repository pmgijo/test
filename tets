function apportionLMI(lmiDetails, currentReturnData) {
  if (lmiDetails && lmiDetails.lmiPremium && currentReturnData && currentReturnData.loanDetails) {
    // Ensure all loan amounts are valid numbers and above 0
    const updatedReturnData = JSON.parse(JSON.stringify(currentReturnData));
    
    const ttlLoanAmount = updatedReturnData.loanDetails.reduce((sum, loan) => {
      const loanAmount = parseFloat(loan.loanAmount || 0);
      return sum + loanAmount;
    }, 0);

    if (ttlLoanAmount <= 0) {
      console.error("Total Loan Amount is invalid:", ttlLoanAmount);
      return updatedReturnData; // Return early to avoid divide-by-zero
    }

    const apportionedLmi = updatedReturnData.loanDetails.map(loan => {
      const loanAmount = parseFloat(loan.loanAmount || 0);
      return {
        id: loan.id,
        lmiApportioned: (loanAmount / ttlLoanAmount) * lmiDetails.lmiPremium
      };
    });

    const updatedLoanDetails = updatedReturnData.loanDetails.map(loan => {
      const apportionedItem = apportionedLmi.find(item => item.id === loan.id);
      const apportionedAmount = apportionedItem ? parseFloat(apportionedItem.lmiApportioned || 0) : 0;
      const newTotalLoanAmount = (parseFloat(loan.loanAmount || 0) + apportionedAmount).toFixed(2);

      return {
        ...loan,
        totalLoanAmount: newTotalLoanAmount // Ensure this matches the structure in the state
      };
    });

    updatedReturnData.loanDetails = updatedLoanDetails;
    updatedReturnData.lmiCosts = lmiDetails;

    console.log("Final updatedReturnData:", JSON.stringify(updatedReturnData, null, 2));
    return updatedReturnData; // Ensure this returns the updated data
  }

  return currentReturnData; // Return current state if conditions aren't met
}
